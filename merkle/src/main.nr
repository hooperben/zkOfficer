// use dep::noir_merkleroot;
use dep::std;

fn compute_merkle_root(leaf: Field, path_indices: [Field; 8], siblings: [Field; 8]) -> Field {
    let n = siblings.len();
    let mut current = leaf;
    for i in 0..n {
        let is_right = (path_indices[i] == 1) as bool;
        let (hash_left, hash_right) = if is_right {
            (siblings[i], current)
        } else {
            (current, siblings[i])
        };
        current = std::hash::poseidon::bn254::hash_2([hash_left, hash_right]);
    }
    current
}

fn main(root: pub Field, leaf: Field, path_indices: [Field; 8], siblings: [Field; 8]) {
    // generate merkle root
    let new_root = compute_merkle_root(leaf, path_indices, siblings);
    assert(new_root == root);
}

#[test]
// fn test_compute_merkle_root() {
//     let leaf = 13780856135824609486835123660791248959181113742546918549559321242116770234576;
//     let path_indices = [0, 0, 1, 1, 0, 1, 1, 0];
//     let siblings = [
//         14520510218039433773459597944105601781578483631006408988284677481489650471896,
//         16735405162150476769165535806199980191266151907719469609340290185602038249334,
//         11607634630385916762103142687024023731847490136503700052557112073181947753651,
//         1094530894963466396181348105151045704221228209480186211832907007839607915796,
//         3284044843315180235425920080565507273212761221150458610158014968492963231945,
//         4641050443441813769099735638332230934538706616831662404912867311564816535000,
//         13308983921089595976695015024214414181663897095192147251475586735720084500210,
//         12699940109500066053124654505808015855541980379149317240855603319465855478536,
//     ];
//     let root = noir_merkleroot::compute_merkle_root(leaf, path_indices, siblings);
//     assert(root == 3507270469832926990571112645872386345557614009066375654691910206440851534809);
// }

fn test_my_custom_tree() {
    let leaf = 5417298920632358229503946331647874547703095012333291731894858595676498750711;
    let path_indices = [0, 0, 0, 0, 0, 0, 0, 0];
    let siblings = [
        21663839004416932945382355908790599225266501822907911457504978515578255421292,
        8995896153219992062710898675021891003404871425075198597897889079729967997688,
        15126246733515326086631621937388047923581111613947275249184377560170833782629,
        6404200169958188928270149728908101781856690902670925316782889389790091378414,
        17903822129909817717122288064678017104411031693253675943446999432073303897479,
        11423673436710698439362231088473903829893023095386581732682931796661338615804,
        10494842461667482273766668782207799332467432901404302674544629280016211342367,
        17400501067905286947724900644309270241576392716005448085614420258732805558809,
    ];
    let root = compute_merkle_root(leaf, path_indices, siblings);

    assert(root == 15403892286605756147578194685398955343522683323319211105324859804267310098432);
}
