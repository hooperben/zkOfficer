/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../common";
import type { Registry, RegistryInterface } from "../../contracts/Registry";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_verifier",
        type: "address",
      },
      {
        internalType: "address",
        name: "hasher",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "indexedleaf",
        type: "bytes32",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "leafIndex",
        type: "uint256",
      },
    ],
    name: "NewLeaf",
    type: "event",
  },
  {
    inputs: [],
    name: "FIELD_SIZE",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "ROOT_HISTORY_SIZE",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "ZERO_VALUE",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_leaf",
        type: "bytes32",
      },
    ],
    name: "addLeaf",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "authority",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "currentRootIndex",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "filledSubtrees",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getLastRoot",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_left",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "_right",
        type: "bytes32",
      },
    ],
    name: "hashLeftRight",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "hasher",
    outputs: [
      {
        internalType: "contract IHasher",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_root",
        type: "bytes32",
      },
    ],
    name: "isKnownRoot",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "levels",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "nextIndex",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "roots",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "verifier",
    outputs: [
      {
        internalType: "contract UltraVerifier",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "_proof",
        type: "bytes",
      },
      {
        internalType: "bytes32[]",
        name: "_publicInputs",
        type: "bytes32[]",
      },
    ],
    name: "verifyProof",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "i",
        type: "uint256",
      },
    ],
    name: "zeros",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "zk_leaf_root_______",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a0604052600380546001600160401b03191690553480156200002157600080fd5b50604051620019dd380380620019dd83398101604081905262000044916200016b565b6008817f220e4b4823da0db552468228884e3a4675fc1bee50cb697891977312ae92280062000077565b60405180910390fd5b60208363ffffffff1610620000a05760405162461bcd60e51b81526004016200006e90620001a9565b63ffffffff909216608052600080546001600160a01b039283166001600160a01b031991821617825590805260026020527fac33ff75c19e70fe83507db0d683fd3465c996598dc972688b7ace676c89077b9290925560038054949091166801000000000000000002600160401b600160e01b031990941693909317909255506004805490911633179055620001e5565b60006001600160a01b0382165b92915050565b6200014f8162000131565b81146200015b57600080fd5b50565b80516200013e8162000144565b60008060408385031215620001835762000183600080fd5b6200018f84846200015e565b9150620001a084602085016200015e565b90509250929050565b602080825281016200013e81601e81527f5f6c6576656c732073686f756c64206265206c657373207468616e2033320000602082015260400190565b6080516117ce6200020f600039600081816101f001528181610da30152610e1801526117ce6000f3fe608060405234801561001057600080fd5b50600436106101365760003560e01c8063bf7e214f116100b2578063ea94934611610081578063ed33639f11610066578063ed33639f14610323578063f178e47c14610343578063fc7e9c6f1461036357600080fd5b8063ea949346146102e7578063ec732959146102fc57600080fd5b8063bf7e214f1461027f578063c2b40ae4146102ac578063cd87a3b4146102cc578063e8295588146102d457600080fd5b80634ecf518b1161010957806390eeb02b116100ee57806390eeb02b1461023f578063ba70f7571461024f578063bbcb7c741461026c57600080fd5b80634ecf518b146101eb5780636d9833e31461021f57600080fd5b806303cdfeee1461013b5780632b7ac3f31461017857806338bf282e146101b1578063414a37ba146101c4575b600080fd5b6101627f220e4b4823da0db552468228884e3a4675fc1bee50cb697891977312ae92280081565b60405161016f9190610fbc565b60405180910390f35b6003546101a49068010000000000000000900473ffffffffffffffffffffffffffffffffffffffff1681565b60405161016f9190611007565b6101626101bf366004611030565b61037b565b6101627f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000181565b6102127f000000000000000000000000000000000000000000000000000000000000000081565b60405161016f9190611074565b61023261022d366004611082565b6104b7565b60405161016f91906110b0565b6003546102129063ffffffff1681565b60035463ffffffff16600090815260026020526040902054610162565b61023261027a36600461115b565b610535565b60045461029f9073ffffffffffffffffffffffffffffffffffffffff1681565b60405161016f91906111dd565b6101626102ba366004611082565b60026020526000908152604090205481565b610212606481565b6101626102e2366004611082565b610626565b6102fa6102f5366004611082565b610c4e565b005b6101627f2fe54c60d3acabf3343a35b6eba15db4821b340f76e741e2249685ed4899af6c81565b6000546101a49073ffffffffffffffffffffffffffffffffffffffff1681565b610162610351366004611082565b60016020526000908152604090205481565b60035461021290640100000000900463ffffffff1681565b60007f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000183106103c55760405162461bcd60e51b81526004016103bc9061121d565b60405180910390fd5b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182106104045760405162461bcd60e51b81526004016103bc90611287565b61040c610f96565b838152602081018390526000546040517f299e566000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169063299e56609061046c9084906004016112f0565b602060405180830381865afa158015610489573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ad9190611309565b9150505b92915050565b60008181036104c857506000919050565b60035463ffffffff16805b63ffffffff811660009081526002602052604090205484036104f9575060019392505050565b8063ffffffff1660000361050b575060645b806105158161133e565b9150508163ffffffff168163ffffffff16036104d3575060009392505050565b60006105598383600081811061054d5761054d611297565b905060200201356104b7565b6105755760405162461bcd60e51b81526004016103bc906113ab565b6003546040517fea50d0e40000000000000000000000000000000000000000000000000000000081526801000000000000000090910473ffffffffffffffffffffffffffffffffffffffff169063ea50d0e4906105dc908890889088908890600401611460565b602060405180830381865afa1580156105f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061061d91906114a4565b95945050505050565b60008160000361065757507f2fe54c60d3acabf3343a35b6eba15db4821b340f76e741e2249685ed4899af6c919050565b8160010361068657507f13e37f2d6cb86c78ccc1788607c2b199788c6bb0a615a21f2e7a8e88384222f8919050565b816002036106b557507f217126fa352c326896e8c2803eec8fd63ad50cf65edfef27a41a9e32dc622765919050565b816003036106e457507f0e28a61a9b3e91007d5a9e3ada18e1b24d6d230c618388ee5df34cacd7397eee919050565b8160040361071357507f27953447a6979839536badc5425ed15fadb0e292e9bc36f92f0aa5cfa5013587919050565b8160050361074257507f194191edbfb91d10f6a7afd315f33095410c7801c47175c2df6dc2cce0e3affc919050565b8160060361077157507f1733dece17d71190516dbaf1927936fa643dc7079fc0cc731de9d6845a47741f919050565b816007036107a057507f267855a7dc75db39d81d17f95d0a7aa572bf5ae19f4db0e84221d2b2ef999219919050565b816008036107cf57507f1184e11836b4c36ad8238a340ecc0985eeba665327e33e9b0e3641027c27620d919050565b816009036107fe57507f0702ab83a135d7f55350ab1bfaa90babd8fc1d2b3e6a7215381a7b2213d6c5ce919050565b81600a0361082d57507f2eecc0de814cfd8c57ce882babb2e30d1da56621aef7a47f3291cffeaec26ad7919050565b81600b0361085c57507f280bc02145c155d5833585b6c7b08501055157dd30ce005319621dc462d33b47919050565b81600c0361088b57507f045132221d1fa0a7f4aed8acd2cbec1e2189b7732ccb2ec272b9c60f0d5afc5b919050565b81600d036108ba57507f27f427ccbf58a44b1270abbe4eda6ba53bd6ac4d88cf1e00a13c4371ce71d366919050565b81600e036108e957507f1617eaae5064f26e8f8a6493ae92bfded7fde71b65df1ca6d5dcec0df70b2cef919050565b81600f0361091857507f20c6b400d0ea1b15435703c31c31ee63ad7ba5c8da66cec2796feacea575abca919050565b8160100361094757507f09589ddb438723f53a8e57bdada7c5f8ed67e8fece3889a73618732965645eec919050565b8160110361097557507e64b6a738a5ff537db7b220f3394f0ecbd35bfd355c5425dc1166bf3236079b919050565b816012036109a457507f095de56281b1d5055e897c3574ff790d5ee81dbc5df784ad2d67795e557c9e9f919050565b816013036109d357507f11cf2e2887aa21963a6ec14289183efe4d4c60f14ecd3d6fe0beebdf855a9b63919050565b81601403610a0257507f2b0f6fc0179fa65b6f73627c0e1e84c7374d2eaec44c9a48f2571393ea77bcbb919050565b81601503610a3157507f16fdb637c2abf9c0f988dbf2fd64258c46fb6a273d537b2cf1603ea460b13279919050565b81601603610a6057507f21bbd7e944f6124dad4c376df9cc12e7ca66e47dff703ff7cedb1a454edcf0ff919050565b81601703610a8f57507f2784f8220b1c963e468f590f137baaa1625b3b92a27ad9b6e84eb0d3454d9962919050565b81601803610abe57507f16ace1a65b7534142f8cc1aad810b3d6a7a74ca905d9c275cb98ba57e509fc10919050565b81601903610aed57507f2328068c6a8c24265124debd8fe10d3f29f0665ea725a65e3638f6192a96a013919050565b81601a03610b1c57507f2ddb991be1f028022411b4c4d2c22043e5e751c120736f00adf54acab1c9ac14919050565b81601b03610b4b57507f0113798410eaeb95056a464f70521eb58377c0155f2fe518a5594d38cc209cc0919050565b81601c03610b7a57507f202d1ae61526f0d0d01ef80fb5d4055a7af45721024c2c24cffd6a3798f54d50919050565b81601d03610ba957507f23ab323453748129f2765f79615022f5bebd6f4096a796300aab049a60b0f187919050565b81601e03610bd857507f1f15585f8947e378bcf8bd918716799da909acdb944c57150b1eb4565fda8aa0919050565b81601f03610c0757507f1eb064b21055ac6a350cf41eb30e4ce2cb19680217df3a243617c2838185ad06919050565b81602003610c3657507f25a90efc49af54a5b7154a6eaba978dcf04796b4984fe54be8d4ea8579e1f1e6919050565b60405162461bcd60e51b81526004016103bc906114f5565b60045473ffffffffffffffffffffffffffffffffffffffff163314610c855760405162461bcd60e51b81526004016103bc9061155d565b610caf817f220e4b4823da0db552468228884e3a4675fc1bee50cb697891977312ae922800610d8a565b50600354610ccd90600290640100000000900463ffffffff1661156d565b63ffffffff167fc699d529beb053d9fcee0b6bae85d0d931e4029a8ad99e7b315e0d3ab066cffa82604051610d029190610fbc565b60405180910390a2600354610d2790600190640100000000900463ffffffff1661156d565b63ffffffff167fc699d529beb053d9fcee0b6bae85d0d931e4029a8ad99e7b315e0d3ab066cffa7f220e4b4823da0db552468228884e3a4675fc1bee50cb697891977312ae92280060001b604051610d7f9190610fbc565b60405180910390a250565b600354600090640100000000900463ffffffff16610dc97f0000000000000000000000000000000000000000000000000000000000000000600261169b565b63ffffffff168163ffffffff1603610df35760405162461bcd60e51b81526004016103bc90611716565b6000610e0060028361173c565b90506000610e0e868661037b565b905060008060015b7f000000000000000000000000000000000000000000000000000000000000000063ffffffff168163ffffffff161015610ed057610e5560028661175a565b63ffffffff16600003610e9357839250610e748163ffffffff16610626565b63ffffffff821660009081526001602052604090208590559150610eaf565b63ffffffff811660009081526001602052604090205492508391505b610eb9838361037b565b9350610ec660028661173c565b9450600101610e16565b50600354600090606490610eeb9063ffffffff166001611778565b610ef5919061175a565b600380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000001663ffffffff83169081179091556000908152600260208190526040909120869055909150610f4a908790611778565b6003805463ffffffff92909216640100000000027fffffffffffffffffffffffffffffffffffffffffffffffff00000000ffffffff909216919091179055509394505050505092915050565b60405180604001604052806002906020820280368337509192915050565b805b82525050565b602081016104b18284610fb4565b600073ffffffffffffffffffffffffffffffffffffffff82166104b1565b60006104b182610fca565b60006104b182610fe8565b610fb681610ff3565b602081016104b18284610ffe565b805b811461102257600080fd5b50565b80356104b181611015565b6000806040838503121561104657611046600080fd5b6110508484611025565b915061105f8460208501611025565b90509250929050565b63ffffffff8116610fb6565b602081016104b18284611068565b60006020828403121561109757611097600080fd5b6110a18383611025565b9392505050565b801515610fb6565b602081016104b182846110a8565b60008083601f8401126110d3576110d3600080fd5b50813567ffffffffffffffff8111156110ee576110ee600080fd5b60208301915083600182028301111561110957611109600080fd5b9250929050565b60008083601f84011261112557611125600080fd5b50813567ffffffffffffffff81111561114057611140600080fd5b60208301915083602082028301111561110957611109600080fd5b6000806000806040858703121561117457611174600080fd5b843567ffffffffffffffff81111561118e5761118e600080fd5b61119a878288016110be565b9450945050602085013567ffffffffffffffff8111156111bc576111bc600080fd5b6111c887828801611110565b95989497509550505050565b610fb681610fca565b602081016104b182846111d4565b60208082527f5f6c6566742073686f756c6420626520696e7369646520746865206669656c6491019081525b60200190565b602080825281016104b1816111eb565b60218152602081017f5f72696768742073686f756c6420626520696e7369646520746865206669656c81527f6400000000000000000000000000000000000000000000000000000000000000602082015290505b60400190565b602080825281016104b18161122d565b634e487b7160e01b600052603260045260246000fd5b6112b78282610fb4565b5060200190565b60028160005b828110156112e95781516112d886826112ad565b9550506020820191506001016112c4565b5050505050565b604081016104b182846112be565b80516104b181611015565b60006020828403121561131e5761131e600080fd5b6110a183836112fe565b634e487b7160e01b600052601160045260246000fd5b63ffffffff1660008161135357611353611328565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b600c8152602081017f496e76616c696420726f6f74000000000000000000000000000000000000000081529050611217565b602080825281016104b181611379565b82818337506000910152565b8183526020830192506113db8284836113bb565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0160190565b82818337505050565b81835260208301925060007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83111561144957611449600080fd5b60208302925061145a838584611405565b50500190565b604080825281016114728186886113c7565b9050818103602083015261148781848661140e565b9695505050505050565b801515611017565b80516104b181611491565b6000602082840312156114b9576114b9600080fd5b6110a18383611499565b60138152602081017f496e646578206f7574206f6620626f756e64730000000000000000000000000081529050611217565b602080825281016104b1816114c3565b60278152602081017f4f6e6c7920616e20617574686f726974792063616e206164642061207265636f81527f7264206c6561660000000000000000000000000000000000000000000000000060208201529050611281565b602080825281016104b181611505565b63ffffffff9182169190811690828203908111156104b1576104b1611328565b80825b60018511156115cc578086048111156115ab576115ab611328565b60018516156115b957908102905b80026115c58560011c90565b9450611590565b94509492505050565b6000826115e4575060016110a1565b816115f1575060006110a1565b816001811461160757600281146116115761163e565b60019150506110a1565b60ff84111561162257611622611328565b8360020a91508482111561163857611638611328565b506110a1565b5060208310610133831016604e8410600b8410161715611671575081810a8381111561166c5761166c611328565b6110a1565b61167e848484600161158d565b9250905081840481111561169457611694611328565b0292915050565b63ffffffff8116905063ffffffff8216915060006110a163ffffffff84846115d5565b60308152602081017f4d65726b6c6520747265652069732066756c6c2e204e6f206d6f7265206c656181527f7665732063616e2062652061646465640000000000000000000000000000000060208201529050611281565b602080825281016104b1816116be565b634e487b7160e01b600052601260045260246000fd5b63ffffffff918216911660008261175557611755611726565b500490565b63ffffffff918216911660008261177357611773611726565b500690565b63ffffffff9182169190811690828201908111156104b1576104b161132856fea26469706673582212201141d0424f71c0f26a9b0ac0c5a5e8a3b272f39ee3fd0aed94f3f8a5df21e80564736f6c63430008180033";

type RegistryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RegistryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Registry__factory extends ContractFactory {
  constructor(...args: RegistryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _verifier: AddressLike,
    hasher: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_verifier, hasher, overrides || {});
  }
  override deploy(
    _verifier: AddressLike,
    hasher: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(_verifier, hasher, overrides || {}) as Promise<
      Registry & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Registry__factory {
    return super.connect(runner) as Registry__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RegistryInterface {
    return new Interface(_abi) as RegistryInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Registry {
    return new Contract(address, _abi, runner) as unknown as Registry;
  }
}
